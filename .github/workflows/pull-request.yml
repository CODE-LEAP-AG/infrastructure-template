name: "Pull request to Main Branch"

on:
  pull_request:
    branches:
      - main

env:
  # Used for App Registration Federated Authentication
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  # Terraform core and ops variables
  TF_VAR_prefix: ${{ vars.TF_VAR_PREFIX }}
  TF_VAR_env: ${{ vars.TF_VAR_ENV }}
  TF_VAR_location: ${{ vars.TF_VAR_LOCATION }}

jobs:
  determine-infra-changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      infrastructure: ${{ steps.determine-changes.outputs.infrastructure }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v3
        id: determine-changes
        with:
          filters: |
            infrastructure:
              - 'infrastructure/**'

  provision-infrastructure:
    needs: determine-infra-changes
    if: ${{ needs.determine-infra-changes.outputs.infrastructure == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Azure CLI login
        uses: azure/login@v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3.1.1
        with:
          terraform_wrapper: false
      - name: Terraform Core
        run: |
          terraform init
          terraform plan
          terraform apply --auto-approve
        working-directory: ${{ github.workspace }}/infrastructure/terraform/core
      - name: Terraform Ops
        run: |
          terraform init
          terraform plan
          terraform apply --auto-approve
        working-directory: ${{ github.workspace }}/infrastructure/terraform/ops

  determine-app-changes:
    needs: provision-infrastructure
    if: ${{ always() }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      frontend: ${{ steps.determine-changes.outputs.frontend }}
    steps:
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v3
        id: determine-changes
        with:
          filters: |
            frontend:
              - 'frontend/**'

  build-frontend:
    needs:
      - determine-app-changes
    if: ${{ needs.determine-app-changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Build and Test React app
        run: |
          npm install
          npm run build
          npm test
        working-directory: ${{ github.workspace }}/frontend

  release-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Azure CLI login
        uses: azure/login@v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      - name: Login to ACR
        run: az acr login --name "${{ env.TF_VAR_prefix }}${{ env.TF_VAR_env }}acr"
      - name: Build and push Docker image
        run: |
          docker build -t "${{ env.TF_VAR_prefix }}${{ env.TF_VAR_env }}acr.azurecr.io/frontend:${{ github.event.number }}" -f frontend.dockerfile .
          docker push "${{ env.TF_VAR_prefix }}${{ env.TF_VAR_env }}acr.azurecr.io/frontend:${{ github.event.number }}"
        working-directory: ${{ github.workspace }}/frontend

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: release-frontend
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Azure CLI login
        uses: azure/login@v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      - name: Update kube-config
        run: az aks get-credentials --resource-group "${{ env.TF_VAR_prefix }}${{ env.TF_VAR_env }}rg" --name "${{ env.TF_VAR_prefix }}${{ env.TF_VAR_env }}aks"
      - name: Install Helm
        uses: azure/setup-helm@v4
      - name: Apply Helm chart
        run: helm upgrade --install frontend . --set image.tag="${{ github.event.number }}" --set image.repository="${{ env.TF_VAR_prefix }}${{ env.TF_VAR_env }}acr.azurecr.io/frontend"
        working-directory: ${{ github.workspace }}/infrastructure/helm-chart/frontend

  # destroy-infrastructure:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     id-token: write
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Azure CLI login
  #       uses: azure/login@v2.1.1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}

  #     - name: Install Terraform
  #       uses: hashicorp/setup-terraform@v3.1.1
  #       with:
  #         terraform_wrapper: false

  #     - name: Destroy Terraform Ops
  #       run: |
  #         terraform init
  #         terraform plan
  #         terraform destroy --auto-approve
  #       working-directory: ${{ github.workspace }}/infrastructure/terraform/ops

  #     - name: Destroy Terraform Core
  #       run: |
  #         terraform init
  #         terraform plan
  #         terraform destroy --auto-approve
  #       working-directory: ${{ github.workspace }}/infrastructure/terraform/core
